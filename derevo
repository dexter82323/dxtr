#include "pch.h"
#include <malloc.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

typedef struct node {
	int key;// Ключ, по которому строится дерево
	struct node *left, *right;// Указатели на соседние узлы
}NODE, *pNODE;

pNODE addnode(int x, pNODE root) {
	if (!root) { // Если дерева нет, то формируем корень
		root = (pNODE)malloc(sizeof(NODE)); // память под узел
		if (root) {
			root->key = x;   // поле данных
			root->left = NULL;
			root->right = NULL; // ветви инициализируем пустотой
		}
	}
	else
		if (x < root->key)   // условие добавление левого потомка
			root->left = addnode(x, root->left);
		else    // условие добавление правого потомка
			root->right = addnode(x, root->right);
	return root;
}



void preorder(pNODE root) // нисходящий обход
{
	if (root) { //Пока не встретится пустой узел
		printf("%d; ", root->key); //Отображаем корень дерева
		preorder(root->left); //Рекурсивная функция для левого поддерева
		preorder(root->right); //Рекурсивная функция для правого поддерева
	}
}

void postorder(pNODE root) // восходящий обход
{
	if (root) { //Пока не встретится пустой узел
		postorder(root->left); //Рекурсивная функция для левого поддерева
		postorder(root->right); //Рекурсивная функция для правого поддерева
		printf("%d; ", root->key); //Отображаем корень дерева
	}
}
void inorder(pNODE root)//
{
	if (root) { //Пока не встретится пустой узел
		inorder(root->left); //Рекурсивная функция для левого поддерева
		printf("%d; ", root->key); //Отображаем корень дерева
		inorder(root->right); //Рекурсивная функция для правого поддерева
	}
}

pNODE find_tree(pNODE root, int val)
{
	if (!root)
		return NULL;
	if (val == root->key)
		return root;
	if (val < root->key)
		return find_tree(root->left, val);
	if (val >= root->key)
		return find_tree(root->right, val);
}
int rightmost(pNODE root) //поиск крайнего правого листа
{
	while (root->right)
		root = root->right;
	return root->key;
}
pNODE del_tree(pNODE root, int val) {
	if (!root) return NULL;
	if (root->key == val) {
		if (!(root->left) && !(root->right)) {
			free(root);
			return NULL;
		}
		if (!(root->right) && root->left) {
			pNODE temp = root->left;
			free(root);
			return temp;
		}
		if (!(root->left) && root->right) {
			pNODE temp = root->right;
			free(root);
			return temp;
		}
		root->key = rightmost(root->left);
		root->left = del_tree(root->left, root->key);
		return root;
	}
	if (val < root->key) {
		root->left = del_tree(root->left, val);
		return root;
	}
	if (val >= root->key) {
		root->right = del_tree(root->right, val);
		return root;
	}
	return root;
}
void Nnodes(pNODE root, int *p)
{
	if (!root) return;
	(*p)++;
	Nnodes(root->left, p);
	Nnodes(root->right, p);
}
void Height(pNODE root, int p, int* h)
{
	if (!root) return;
	p++;
	if (!(root->left) && !(root->right)) // Проверка на достижение терминального узла
		if (p > *h) *h = p;
	Height(root->left, p, h);
	Height(root->right, p, h);

}

void del_all(pNODE *root)
{
	if (!*root) return;
	del_all(&(*root)->left);
	del_all(&(*root)->right);
	free(*root);
	*root = NULL;
}

int main()
{
	pNODE p, root = NULL;
	int i, k, *h = &k;
	srand(time(NULL));
	for (i = 0; i < 5; i++)
		root = addnode(rand() % 70, root);
	i = 0;
	Nnodes(root, &i);
	printf("\nIn tree %d nodes\n", i);
	*h = 0;
	Height(root, 0, h);
	printf("\nHeight tree =%d \n", *h);
	preorder(root);
	printf("\n");
	postorder(root);
	printf("\n");
	inorder(root);
	printf("\n");
	/*
	for (i=0;i<20;i++){
	k=rand()%70;
	p=find_tree(root,k );
	if (p){
	printf("\nValue %d find = %d\n",k, p->key);
	root=del_tree(root, k);
	preorder(root);
	}
	else printf("\nValue %d not find\n",k);
	}
	*/
	del_all(&root);
	preorder(root);

	printf("\n root   %p\n", root);
	//del_all_Modifier(&root);

	//printf("\n root   %p",root);
	system("pause");
	return 0;
}
